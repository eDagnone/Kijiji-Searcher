"use strict";
// html-searcher.ts
/* Provides implementation for searcher which retrieves
   results via the public-facing website */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTMLSearcher = void 0;
var cheerio_1 = __importDefault(require("cheerio"));
var querystring_1 = __importDefault(require("querystring"));
var node_fetch_1 = __importDefault(require("node-fetch"));
var ad_1 = require("../ad");
var constants_1 = require("../constants");
var helpers_1 = require("../helpers");
var KIJIJI_BASE_URL = "https://www.kijiji.ca";
var KIJIJI_SEARCH_URL = KIJIJI_BASE_URL + "/b-search.html";
var LOCATION_REGEX = /(.+)(\/.*)$/;
/* Extracts ad information from the HTML of a Kijiji ad results page */
function parseResultsHTML(html) {
    var e_1, _a;
    var _b, _c;
    var adResults = [];
    var $ = cheerio_1.default.load(html);
    if (html.trim().length === 0) {
        return adResults;
    }
    // Kijiji is nice and gives us an object containing ad info
    var resultJson = $("script#__NEXT_DATA__").text().trim();
    if (!resultJson) {
        throw new Error("Kijiji result JSON not present. ".concat(constants_1.POSSIBLE_BAD_MARKUP));
    }
    var parsedResultJson = (_c = (_b = JSON.parse(resultJson)
        .props) === null || _b === void 0 ? void 0 : _b.pageProps) === null || _c === void 0 ? void 0 : _c.__APOLLO_STATE__;
    if (parsedResultJson === undefined) {
        throw new Error("Result JSON could not be parsed. ".concat(constants_1.POSSIBLE_BAD_MARKUP));
    }
    // All non-sponsored ads
    var filteredAds = Object.entries(parsedResultJson).filter(function (entry) {
        var _a, _b;
        return entry[0].toLowerCase().startsWith("listing") &&
            ((_b = (_a = entry[1]) === null || _a === void 0 ? void 0 : _a.adSource) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === "organic";
    }).map(function (entry) { return entry[1]; });
    try {
        for (var filteredAds_1 = __values(filteredAds), filteredAds_1_1 = filteredAds_1.next(); !filteredAds_1_1.done; filteredAds_1_1 = filteredAds_1.next()) {
            var ad = filteredAds_1_1.value;
            if (!ad.seoUrl || !ad.id || !ad.title || !ad.activationDate) {
                throw new Error("Result ad could not be parsed. ".concat(constants_1.POSSIBLE_BAD_MARKUP));
            }
            var url = KIJIJI_BASE_URL + ad.seoUrl;
            var info = {
                id: ad.id,
                title: ad.title.trim(),
                image: (0, helpers_1.getLargeImageURL)((ad.imageUrls || [])[0] || ""),
                date: new Date(ad.activationDate),
                description: (ad.description || "").trim()
            };
            adResults.push(new ad_1.Ad(url, info));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (filteredAds_1_1 && !filteredAds_1_1.done && (_a = filteredAds_1.return)) _a.call(filteredAds_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return adResults;
}
/**
 * Searcher implementation
 */
var HTMLSearcher = /** @class */ (function () {
    function HTMLSearcher() {
        this.firstResultPageURL = undefined;
    }
    /* Retrieves the URL of the first page of search results */
    HTMLSearcher.prototype.getFirstResultPageURL = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.firstResultPageURL === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, (0, node_fetch_1.default)("".concat(KIJIJI_SEARCH_URL, "?").concat(querystring_1.default.stringify(params)), { headers: constants_1.HTML_REQUEST_HEADERS })];
                    case 1:
                        res = _a.sent();
                        // Kijiji will redirect to the rendered results
                        // Grab the destination path so that it can be modified for pagination
                        if (res.status === 403) {
                            throw new Error(constants_1.BANNED);
                        }
                        else if (res.status !== 200 || !res.url) {
                            throw new Error("Kijiji failed to redirect to results page. ".concat(constants_1.POSSIBLE_BAD_MARKUP));
                        }
                        this.firstResultPageURL = res.url;
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.firstResultPageURL];
                }
            });
        });
    };
    /* Retrieves one page of Kijiji search results */
    HTMLSearcher.prototype.getPageResults = function (params, pageNum) {
        return __awaiter(this, void 0, void 0, function () {
            var firstResultPageURL, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFirstResultPageURL(params)];
                    case 1:
                        firstResultPageURL = _a.sent();
                        url = firstResultPageURL.replace(LOCATION_REGEX, "$1/page-".concat(pageNum, "$2"));
                        // Search Kijiji
                        return [2 /*return*/, (0, node_fetch_1.default)(url, { headers: constants_1.HTML_REQUEST_HEADERS })
                                .then(function (res) {
                                if (res.status === 403) {
                                    throw new Error(constants_1.BANNED);
                                }
                                return res.text();
                            })
                                .then(function (body) { return ({
                                pageResults: parseResultsHTML(body),
                                isLastPage: body.indexOf("pagination-next-link") === -1
                            }); })];
                }
            });
        });
    };
    return HTMLSearcher;
}());
exports.HTMLSearcher = HTMLSearcher;
